{"ast":null,"code":"import { __extends, __makeTemplateObject } from \"tslib\";\nimport React, { Component } from 'react';\nimport { Transition } from 'react-transition-group';\nimport styled from 'styled-components';\nimport { SIZES_MAP, DEFAULT_SIZE } from './constants';\nimport Container from './styledContainer';\nimport Svg from './styledSvg';\nvar Outer = styled.span(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  display: inline-block;\\n  vertical-align: middle;\\n\"], [\"\\n  display: inline-block;\\n  vertical-align: middle;\\n\"])));\nOuter.displayName = 'Outer';\n\nvar Spinner =\n/** @class */\nfunction (_super) {\n  __extends(Spinner, _super);\n\n  function Spinner(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.transitionNode = null;\n\n    _this.enter = function () {\n      var delay = _this.props.delay;\n\n      if (delay) {\n        _this.setState({\n          phase: 'DELAY'\n        });\n      } else {\n        _this.setState({\n          phase: 'ENTER'\n        });\n      }\n    };\n\n    _this.idle = function () {\n      _this.setState({\n        phase: 'IDLE'\n      });\n    };\n\n    _this.exit = function () {\n      _this.setState({\n        phase: 'LEAVE'\n      });\n    };\n\n    _this.endListener = function (node, done) {\n      var executeCallback = function (event) {\n        // ignore animation events on the glyph\n        if (event.target.tagName === 'svg') {\n          return;\n        }\n\n        if (_this.state.phase === 'DELAY') {\n          _this.setState({\n            phase: 'ENTER'\n          });\n\n          _this.endListener(node, done);\n        } else {\n          done();\n        }\n\n        return node && node.removeEventListener('animationend', executeCallback);\n      }; // FIX - jest-emotion doesn't recognise the DOM node so it can't add\n      // the eventListener in the @atlaskit/button tests.\n      // Should be fixed when we move to emotion@10\n\n\n      if (node && node.addEventListener) {\n        return node.addEventListener('animationend', executeCallback);\n      }\n\n      return done();\n    };\n\n    _this.validateSize = function () {\n      var size = _this.props.size;\n      var spinnerSize = SIZES_MAP[size] || size;\n      return typeof spinnerSize === 'number' ? spinnerSize : DEFAULT_SIZE;\n    };\n\n    _this.state = {\n      phase: ''\n    };\n    return _this;\n  }\n\n  Spinner.prototype.render = function () {\n    var _this = this;\n\n    var phase = this.state.phase;\n    var _a = this.props,\n        delay = _a.delay,\n        invertColor = _a.invertColor,\n        isCompleting = _a.isCompleting,\n        testId = _a.testId;\n    var size = this.validateSize();\n    var strokeWidth = Math.round(size / 10);\n    var strokeRadius = size / 2 - strokeWidth / 2;\n    return React.createElement(Outer, null, React.createElement(Transition, {\n      addEndListener: this.endListener,\n      appear: true,\n      in: !isCompleting,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      onEnter: this.enter,\n      onEntered: this.idle,\n      onExit: this.exit,\n      onExited: function () {\n        return _this.props.onComplete();\n      },\n      timeout: 0,\n      ref: function (node) {\n        _this.transitionNode = node;\n      }\n    }, React.createElement(Container, {\n      delay: delay / 1000,\n      phase: phase,\n      size: size,\n      \"data-testid\": testId\n    }, React.createElement(Svg, {\n      focusable: \"false\",\n      height: size,\n      invertColor: invertColor,\n      phase: phase,\n      size: size,\n      viewBox: \"0 0 \" + size + \" \" + size,\n      width: size,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }, React.createElement(\"circle\", {\n      cx: size / 2,\n      cy: size / 2,\n      r: strokeRadius\n    })))));\n  };\n\n  Spinner.defaultProps = {\n    delay: 100,\n    isCompleting: false,\n    invertColor: false,\n    onComplete: function () {},\n    size: 'medium'\n  };\n  return Spinner;\n}(Component);\n\nexport default Spinner;\nvar templateObject_1;","map":{"version":3,"sources":["../../../src/Spinner/index.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __makeTemplateObject } from \"tslib\";\nimport React, { Component } from 'react';\nimport { Transition } from 'react-transition-group';\nimport styled from 'styled-components';\nimport { SIZES_MAP, DEFAULT_SIZE } from './constants';\nimport Container from './styledContainer';\nimport Svg from './styledSvg';\nvar Outer = styled.span(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  display: inline-block;\\n  vertical-align: middle;\\n\"], [\"\\n  display: inline-block;\\n  vertical-align: middle;\\n\"])));\nOuter.displayName = 'Outer';\nvar Spinner = /** @class */ (function (_super) {\n    __extends(Spinner, _super);\n    function Spinner(props) {\n        var _this = _super.call(this, props) || this;\n        _this.transitionNode = null;\n        _this.enter = function () {\n            var delay = _this.props.delay;\n            if (delay) {\n                _this.setState({ phase: 'DELAY' });\n            }\n            else {\n                _this.setState({ phase: 'ENTER' });\n            }\n        };\n        _this.idle = function () {\n            _this.setState({ phase: 'IDLE' });\n        };\n        _this.exit = function () {\n            _this.setState({ phase: 'LEAVE' });\n        };\n        _this.endListener = function (node, done) {\n            var executeCallback = function (event) {\n                // ignore animation events on the glyph\n                if (event.target.tagName === 'svg') {\n                    return;\n                }\n                if (_this.state.phase === 'DELAY') {\n                    _this.setState({ phase: 'ENTER' });\n                    _this.endListener(node, done);\n                }\n                else {\n                    done();\n                }\n                return node && node.removeEventListener('animationend', executeCallback);\n            };\n            // FIX - jest-emotion doesn't recognise the DOM node so it can't add\n            // the eventListener in the @atlaskit/button tests.\n            // Should be fixed when we move to emotion@10\n            if (node && node.addEventListener) {\n                return node.addEventListener('animationend', executeCallback);\n            }\n            return done();\n        };\n        _this.validateSize = function () {\n            var size = _this.props.size;\n            var spinnerSize = SIZES_MAP[size] || size;\n            return typeof spinnerSize === 'number' ? spinnerSize : DEFAULT_SIZE;\n        };\n        _this.state = {\n            phase: '',\n        };\n        return _this;\n    }\n    Spinner.prototype.render = function () {\n        var _this = this;\n        var phase = this.state.phase;\n        var _a = this.props, delay = _a.delay, invertColor = _a.invertColor, isCompleting = _a.isCompleting, testId = _a.testId;\n        var size = this.validateSize();\n        var strokeWidth = Math.round(size / 10);\n        var strokeRadius = size / 2 - strokeWidth / 2;\n        return (React.createElement(Outer, null,\n            React.createElement(Transition, { addEndListener: this.endListener, appear: true, in: !isCompleting, mountOnEnter: true, unmountOnExit: true, onEnter: this.enter, onEntered: this.idle, onExit: this.exit, onExited: function () { return _this.props.onComplete(); }, timeout: 0, ref: function (node) {\n                    _this.transitionNode = node;\n                } },\n                React.createElement(Container, { delay: delay / 1000, phase: phase, size: size, \"data-testid\": testId },\n                    React.createElement(Svg, { focusable: \"false\", height: size, invertColor: invertColor, phase: phase, size: size, viewBox: \"0 0 \" + size + \" \" + size, width: size, xmlns: \"http://www.w3.org/2000/svg\" },\n                        React.createElement(\"circle\", { cx: size / 2, cy: size / 2, r: strokeRadius }))))));\n    };\n    Spinner.defaultProps = {\n        delay: 100,\n        isCompleting: false,\n        invertColor: false,\n        onComplete: function () { },\n        size: 'medium',\n    };\n    return Spinner;\n}(Component));\nexport default Spinner;\nvar templateObject_1;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}