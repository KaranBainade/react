{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport React, { Component } from 'react';\nimport { mergeStyles } from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport memoizeOne from 'memoize-one';\nimport isEqual from 'react-fast-compare';\nimport * as defaultComponents from './components';\nimport baseStyles from './styles';\nexport default function createSelect(WrappedComponent) {\n  var _a;\n\n  return _a =\n  /** @class */\n  function (_super) {\n    __extends(AtlaskitSelect, _super);\n\n    function AtlaskitSelect(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this.components = {};\n      _this.select = null;\n\n      _this.cacheComponents = function (components, enableAnimation) {\n        _this.components = enableAnimation ? makeAnimated(__assign(__assign({}, defaultComponents), components)) : __assign(__assign({}, defaultComponents), components);\n      };\n\n      _this.onSelectRef = function (ref) {\n        _this.select = ref;\n        var innerRef = _this.props.innerRef;\n\n        if (typeof innerRef === 'object') {\n          innerRef.current = ref;\n        }\n\n        if (typeof innerRef === 'function') {\n          innerRef(ref);\n        }\n      };\n\n      _this.cacheComponents = memoizeOne(_this.cacheComponents, isEqual).bind(_this);\n\n      _this.cacheComponents(props.components || {}, props.enableAnimation);\n\n      return _this;\n    }\n\n    AtlaskitSelect.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n      this.cacheComponents(nextProps.components, nextProps.enableAnimation);\n    };\n\n    AtlaskitSelect.prototype.focus = function () {\n      if (this.select) this.select.focus();\n    };\n\n    AtlaskitSelect.prototype.blur = function () {\n      if (this.select) this.select.blur();\n    };\n\n    AtlaskitSelect.prototype.render = function () {\n      var _a = this.props,\n          styles = _a.styles,\n          validationState = _a.validationState,\n          spacing = _a.spacing,\n          isMulti = _a.isMulti,\n          props = __rest(_a, [\"styles\", \"validationState\", \"spacing\", \"isMulti\"]);\n\n      var isCompact = spacing === 'compact'; // props must be spread first to stop `components` being overridden\n\n      return React.createElement(WrappedComponent, __assign({\n        ref: this.onSelectRef,\n        isMulti: isMulti\n      }, props, {\n        components: this.components,\n        styles: mergeStyles(baseStyles(validationState, isCompact), styles)\n      }));\n    };\n\n    return AtlaskitSelect;\n  }(Component), _a.defaultProps = {\n    enableAnimation: true,\n    validationState: 'default',\n    spacing: 'default',\n    onClickPreventDefault: true,\n    tabSelectsValue: false,\n    components: {},\n    styles: {}\n  }, _a;\n}","map":{"version":3,"sources":["../../src/createSelect.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport React, { Component } from 'react';\nimport { mergeStyles } from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport memoizeOne from 'memoize-one';\nimport isEqual from 'react-fast-compare';\nimport * as defaultComponents from './components';\nimport baseStyles from './styles';\nexport default function createSelect(WrappedComponent) {\n    var _a;\n    return _a = /** @class */ (function (_super) {\n            __extends(AtlaskitSelect, _super);\n            function AtlaskitSelect(props) {\n                var _this = _super.call(this, props) || this;\n                _this.components = {};\n                _this.select = null;\n                _this.cacheComponents = function (components, enableAnimation) {\n                    _this.components = enableAnimation\n                        ? makeAnimated(__assign(__assign({}, defaultComponents), components))\n                        : __assign(__assign({}, defaultComponents), components);\n                };\n                _this.onSelectRef = function (ref) {\n                    _this.select = ref;\n                    var innerRef = _this.props.innerRef;\n                    if (typeof innerRef === 'object') {\n                        innerRef.current = ref;\n                    }\n                    if (typeof innerRef === 'function') {\n                        innerRef(ref);\n                    }\n                };\n                _this.cacheComponents = memoizeOne(_this.cacheComponents, isEqual).bind(_this);\n                _this.cacheComponents(props.components || {}, props.enableAnimation);\n                return _this;\n            }\n            AtlaskitSelect.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n                this.cacheComponents(nextProps.components, nextProps.enableAnimation);\n            };\n            AtlaskitSelect.prototype.focus = function () {\n                if (this.select)\n                    this.select.focus();\n            };\n            AtlaskitSelect.prototype.blur = function () {\n                if (this.select)\n                    this.select.blur();\n            };\n            AtlaskitSelect.prototype.render = function () {\n                var _a = this.props, styles = _a.styles, validationState = _a.validationState, spacing = _a.spacing, isMulti = _a.isMulti, props = __rest(_a, [\"styles\", \"validationState\", \"spacing\", \"isMulti\"]);\n                var isCompact = spacing === 'compact';\n                // props must be spread first to stop `components` being overridden\n                return (React.createElement(WrappedComponent, __assign({ ref: this.onSelectRef, isMulti: isMulti }, props, { components: this.components, styles: mergeStyles(baseStyles(validationState, isCompact), styles) })));\n            };\n            return AtlaskitSelect;\n        }(Component)),\n        _a.defaultProps = {\n            enableAnimation: true,\n            validationState: 'default',\n            spacing: 'default',\n            onClickPreventDefault: true,\n            tabSelectsValue: false,\n            components: {},\n            styles: {},\n        },\n        _a;\n}\n//# sourceMappingURL=createSelect.js.map"]},"metadata":{},"sourceType":"module"}