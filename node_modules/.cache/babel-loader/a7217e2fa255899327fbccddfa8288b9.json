{"ast":null,"code":"import { __assign } from \"tslib\";\n\nvar AnalyticsEvent =\n/** @class */\nfunction () {\n  function AnalyticsEvent(props) {\n    var _this = this;\n\n    this.clone = function () {\n      // We stringify and parse here to get a hacky \"deep clone\" of the object.\n      // This has some limitations in that it wont support functions, regexs, Maps, Sets, etc,\n      // but none of those need to be represented in our payload, so we consider this fine\n      var payload = JSON.parse(JSON.stringify(_this.payload));\n      return new AnalyticsEvent({\n        payload: payload\n      });\n    };\n\n    this.payload = props.payload;\n  }\n\n  AnalyticsEvent.prototype.update = function (updater) {\n    if (typeof updater === 'function') {\n      this.payload = updater(this.payload);\n    }\n\n    if (typeof updater === 'object') {\n      this.payload = __assign(__assign({}, this.payload), updater);\n    }\n\n    return this;\n  };\n\n  return AnalyticsEvent;\n}();\n\nexport default AnalyticsEvent;","map":{"version":3,"sources":["../../src/AnalyticsEvent.tsx"],"names":[],"mappings":";;AAYA,IAAA,cAAA;AAAA;AAAA,YAAA;AAGE,WAAA,cAAA,CAAY,KAAZ,EAAsC;AAAtC,QAAA,KAAA,GAAA,IAAA;;AAIA,SAAA,KAAA,GAAQ,YAAA;AACN;AACA;AACA;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,KAAI,CAAC,OAApB,CAAX,CAAhB;AAEA,aAAO,IAAI,cAAJ,CAAmB;AAAE,QAAA,OAAO,EAAA;AAAT,OAAnB,CAAP;AACD,KAPD;;AAHE,SAAK,OAAL,GAAe,KAAK,CAAC,OAArB;AACD;;AAWD,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAAqC;AACnC,QAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAK,OAAL,GAAgB,OAAkC,CAAC,KAAK,OAAN,CAAlD;AACD;;AAED,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAK,OAAL,GAAY,QAAA,CAAA,QAAA,CAAA,EAAA,EACP,KAAK,OADE,CAAA,EAEP,OAFO,CAAZ;AAID;;AAED,WAAO,IAAP;AACD,GAbD;;AAcF,SAAA,cAAA;AAAC,CA9BD,EAAA","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nvar AnalyticsEvent = /** @class */ (function () {\n    function AnalyticsEvent(props) {\n        var _this = this;\n        this.clone = function () {\n            // We stringify and parse here to get a hacky \"deep clone\" of the object.\n            // This has some limitations in that it wont support functions, regexs, Maps, Sets, etc,\n            // but none of those need to be represented in our payload, so we consider this fine\n            var payload = JSON.parse(JSON.stringify(_this.payload));\n            return new AnalyticsEvent({ payload: payload });\n        };\n        this.payload = props.payload;\n    }\n    AnalyticsEvent.prototype.update = function (updater) {\n        if (typeof updater === 'function') {\n            this.payload = updater(this.payload);\n        }\n        if (typeof updater === 'object') {\n            this.payload = __assign(__assign({}, this.payload), updater);\n        }\n        return this;\n    };\n    return AnalyticsEvent;\n}());\nexport default AnalyticsEvent;\n//# sourceMappingURL=AnalyticsEvent.js.map"]},"metadata":{},"sourceType":"module"}