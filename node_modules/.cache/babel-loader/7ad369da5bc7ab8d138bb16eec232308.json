{"ast":null,"code":"import { __assign } from \"tslib\";\n/** @jsx jsx */\n\nimport { jsx } from '@emotion/core';\nimport { groupedCountries } from './data/countries';\nimport Select from './Select'; // custom option renderer\n\nvar labelCSS = function () {\n  return {\n    alignItems: 'center',\n    display: 'flex',\n    lineHeight: 1.2\n  };\n};\n\nvar flagCSS = function () {\n  return {\n    fontSize: '18px',\n    marginRight: '8px'\n  };\n};\n\nvar Opt = function (_a) {\n  var children = _a.children,\n      icon = _a.icon;\n  return jsx(\"div\", {\n    css: labelCSS()\n  }, jsx(\"span\", {\n    css: flagCSS()\n  }, icon), children);\n}; // return the country name; used for searching\n\n\nvar getOptionLabel = function (opt) {\n  return opt.name;\n}; // set the country's abbreviation for the option value, (also searchable)\n\n\nvar getOptionValue = function (opt) {\n  return opt.abbr;\n}; // the text node of the control\n\n\nvar controlLabel = function (opt) {\n  return jsx(Opt, {\n    icon: opt.icon\n  }, opt.abbr.toUpperCase());\n}; // the text node for an option\n\n\nvar optionLabel = function (_a) {\n  var abbr = _a.abbr,\n      code = _a.code,\n      icon = _a.icon,\n      name = _a.name;\n  return jsx(Opt, {\n    icon: icon\n  }, name, \" (\", abbr.toUpperCase(), \") +\", code);\n}; // switch formatters based on render context (menu | value)\n\n\nvar formatOptionLabel = function (opt, _a) {\n  var context = _a.context;\n  return context === 'value' ? controlLabel(opt) : optionLabel(opt);\n}; // put it all together\n\n\nvar CountrySelect = function (props) {\n  return jsx(Select, __assign({\n    isClearable: false,\n    formatOptionLabel: formatOptionLabel,\n    getOptionLabel: getOptionLabel,\n    getOptionValue: getOptionValue,\n    isMulti: false,\n    options: groupedCountries,\n    styles: {\n      container: function (css) {\n        return __assign(__assign({}, css), {\n          width: 105\n        });\n      },\n      dropdownIndicator: function (css) {\n        return __assign(__assign({}, css), {\n          paddingLeft: 0\n        });\n      },\n      menu: function (css) {\n        return __assign(__assign({}, css), {\n          width: 300\n        });\n      }\n    }\n  }, props));\n};\n\nexport default CountrySelect;","map":{"version":3,"sources":["../../src/CountrySelect.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { groupedCountries } from './data/countries';\nimport Select from './Select';\n// custom option renderer\nvar labelCSS = function () { return ({\n    alignItems: 'center',\n    display: 'flex',\n    lineHeight: 1.2,\n}); };\nvar flagCSS = function () { return ({\n    fontSize: '18px',\n    marginRight: '8px',\n}); };\nvar Opt = function (_a) {\n    var children = _a.children, icon = _a.icon;\n    return (jsx(\"div\", { css: labelCSS() },\n        jsx(\"span\", { css: flagCSS() }, icon),\n        children));\n};\n// return the country name; used for searching\nvar getOptionLabel = function (opt) { return opt.name; };\n// set the country's abbreviation for the option value, (also searchable)\nvar getOptionValue = function (opt) { return opt.abbr; };\n// the text node of the control\nvar controlLabel = function (opt) { return (jsx(Opt, { icon: opt.icon }, opt.abbr.toUpperCase())); };\n// the text node for an option\nvar optionLabel = function (_a) {\n    var abbr = _a.abbr, code = _a.code, icon = _a.icon, name = _a.name;\n    return (jsx(Opt, { icon: icon },\n        name,\n        \" (\",\n        abbr.toUpperCase(),\n        \") +\",\n        code));\n};\n// switch formatters based on render context (menu | value)\nvar formatOptionLabel = function (opt, _a) {\n    var context = _a.context;\n    return (context === 'value' ? controlLabel(opt) : optionLabel(opt));\n};\n// put it all together\nvar CountrySelect = function (props) { return (jsx(Select, __assign({ isClearable: false, formatOptionLabel: formatOptionLabel, getOptionLabel: getOptionLabel, getOptionValue: getOptionValue, isMulti: false, options: groupedCountries, styles: {\n        container: function (css) { return (__assign(__assign({}, css), { width: 105 })); },\n        dropdownIndicator: function (css) { return (__assign(__assign({}, css), { paddingLeft: 0 })); },\n        menu: function (css) { return (__assign(__assign({}, css), { width: 300 })); },\n    } }, props))); };\nexport default CountrySelect;\n//# sourceMappingURL=CountrySelect.js.map"]},"metadata":{},"sourceType":"module"}