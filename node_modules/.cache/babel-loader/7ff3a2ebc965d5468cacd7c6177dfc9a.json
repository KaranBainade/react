{"ast":null,"code":"import { __makeTemplateObject, __rest } from \"tslib\";\nimport styled, { css, keyframes } from 'styled-components';\nimport { themed } from '@atlaskit/theme/components';\nimport { N500, N0 } from '@atlaskit/theme/colors';\nimport { SIZES_MAP } from './constants';\n\nvar getStrokeWidth = function (size) {\n  return Math.round(size / 10);\n};\n\nvar getStrokeCircumference = function (size) {\n  var strokeWidth = getStrokeWidth(size);\n  var strokeRadius = size / 2 - strokeWidth / 2;\n  return Math.PI * strokeRadius * 2;\n};\n/* Define keyframes statically to prevent a perfomance issue in styled components v1 where the keyframes function\n * does not cache previous values resulting in each spinner injecting the same keyframe definition\n * in the DOM.\n * This can be reverted to dynamic keyframes when we upgrade to styled components v2\n */\n\n\nvar keyframeNames = {\n  noop: keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"], [\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"]))),\n  rotate: keyframes(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n    to { transform: rotate(360deg); }\\n  \"], [\"\\n    to { transform: rotate(360deg); }\\n  \"]))),\n  enterOpacity: keyframes(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"], [\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"]))),\n  smallEnterStroke: keyframes(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.small), getStrokeCircumference(SIZES_MAP.small) * 0.8),\n  mediumEnterStroke: keyframes(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.medium), getStrokeCircumference(SIZES_MAP.medium) * 0.8),\n  largeEnterStroke: keyframes(templateObject_6 || (templateObject_6 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.large), getStrokeCircumference(SIZES_MAP.large) * 0.8),\n  xlargeEnterStroke: keyframes(templateObject_7 || (templateObject_7 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.xlarge), getStrokeCircumference(SIZES_MAP.xlarge) * 0.8)\n};\n/* If a standard size is used, we can use one of our statically defined keyframes, otherwise\n * we're forced to dynamically create the keyframe and incur a performance cost.\n */\n\nvar getEnterStrokeKeyframe = function (size) {\n  var standardSizeName = Object.keys(SIZES_MAP).find(function (sizeName) {\n    return size === SIZES_MAP[sizeName];\n  });\n\n  if (standardSizeName) {\n    return keyframeNames[standardSizeName + \"EnterStroke\"];\n  }\n\n  var circumference = getStrokeCircumference(size);\n  return keyframes(templateObject_8 || (templateObject_8 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"])), circumference, circumference * 0.8);\n};\n\nvar spinnerColor = themed({\n  light: N500,\n  dark: N0\n});\nvar spinnerColorInverted = themed({\n  light: N0,\n  dark: N0\n});\nexport var getStrokeColor = function (_a) {\n  var invertColor = _a.invertColor,\n      props = __rest(_a, [\"invertColor\"]);\n\n  return invertColor ? spinnerColorInverted(props) : spinnerColor(props);\n};\nexport var svgStyles = css(templateObject_12 || (templateObject_12 = __makeTemplateObject([\"\\n  \", \";\\n\"], [\"\\n  \", \";\\n\"])), function (props) {\n  var circumference = getStrokeCircumference(props.size);\n\n  var animation = function (animProps) {\n    var baseAnimation = '0.86s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite';\n\n    if (animProps.phase === 'ENTER') {\n      return css(templateObject_9 || (templateObject_9 = __makeTemplateObject([\"\\n          animation: \", \" \", \",\\n            0.8s ease-in-out \", \",\\n            0.2s ease-in-out \", \";\\n        \"], [\"\\n          animation: \", \" \", \",\\n            0.8s ease-in-out \", \",\\n            0.2s ease-in-out \", \";\\n        \"])), baseAnimation, keyframeNames.rotate, getEnterStrokeKeyframe(animProps.size), keyframeNames.enterOpacity);\n    }\n\n    return css(templateObject_10 || (templateObject_10 = __makeTemplateObject([\"\\n        animation: \", \" \", \";\\n      \"], [\"\\n        animation: \", \" \", \";\\n      \"])), baseAnimation, keyframeNames.rotate);\n  };\n\n  return css(templateObject_11 || (templateObject_11 = __makeTemplateObject([\"\\n      \", \"\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"], [\"\\n      \", \"\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"])), animation, getStrokeColor, circumference, circumference * 0.8, getStrokeWidth(props.size));\n});\nvar Svg = styled.svg(templateObject_13 || (templateObject_13 = __makeTemplateObject([\"\\n  \", \";\\n\"], [\"\\n  \", \";\\n\"])), svgStyles);\nSvg.displayName = 'SpinnerSvg';\nexport default Svg;\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13;","map":{"version":3,"sources":["../../../src/Spinner/styledSvg.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __makeTemplateObject, __rest } from \"tslib\";\nimport styled, { css, keyframes } from 'styled-components';\nimport { themed } from '@atlaskit/theme/components';\nimport { N500, N0 } from '@atlaskit/theme/colors';\nimport { SIZES_MAP } from './constants';\nvar getStrokeWidth = function (size) { return Math.round(size / 10); };\nvar getStrokeCircumference = function (size) {\n    var strokeWidth = getStrokeWidth(size);\n    var strokeRadius = size / 2 - strokeWidth / 2;\n    return Math.PI * strokeRadius * 2;\n};\n/* Define keyframes statically to prevent a perfomance issue in styled components v1 where the keyframes function\n * does not cache previous values resulting in each spinner injecting the same keyframe definition\n * in the DOM.\n * This can be reverted to dynamic keyframes when we upgrade to styled components v2\n */\nvar keyframeNames = {\n    noop: keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"], [\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"]))),\n    rotate: keyframes(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n    to { transform: rotate(360deg); }\\n  \"], [\"\\n    to { transform: rotate(360deg); }\\n  \"]))),\n    enterOpacity: keyframes(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"], [\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"]))),\n    smallEnterStroke: keyframes(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \",\n        \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.small), getStrokeCircumference(SIZES_MAP.small) *\n        0.8),\n    mediumEnterStroke: keyframes(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \",\n        \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.medium), getStrokeCircumference(SIZES_MAP.medium) *\n        0.8),\n    largeEnterStroke: keyframes(templateObject_6 || (templateObject_6 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \",\n        \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.large), getStrokeCircumference(SIZES_MAP.large) *\n        0.8),\n    xlargeEnterStroke: keyframes(templateObject_7 || (templateObject_7 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \",\n        \"px; }\\n  \"])), getStrokeCircumference(SIZES_MAP.xlarge), getStrokeCircumference(SIZES_MAP.xlarge) *\n        0.8),\n};\n/* If a standard size is used, we can use one of our statically defined keyframes, otherwise\n * we're forced to dynamically create the keyframe and incur a performance cost.\n */\nvar getEnterStrokeKeyframe = function (size) {\n    var standardSizeName = Object.keys(SIZES_MAP).find(function (sizeName) { return size === SIZES_MAP[sizeName]; });\n    if (standardSizeName) {\n        return keyframeNames[standardSizeName + \"EnterStroke\"];\n    }\n    var circumference = getStrokeCircumference(size);\n    return keyframes(templateObject_8 || (templateObject_8 = __makeTemplateObject([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], [\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"])), circumference, circumference * 0.8);\n};\nvar spinnerColor = themed({ light: N500, dark: N0 });\nvar spinnerColorInverted = themed({ light: N0, dark: N0 });\nexport var getStrokeColor = function (_a) {\n    var invertColor = _a.invertColor, props = __rest(_a, [\"invertColor\"]);\n    return invertColor ? spinnerColorInverted(props) : spinnerColor(props);\n};\nexport var svgStyles = css(templateObject_12 || (templateObject_12 = __makeTemplateObject([\"\\n  \", \";\\n\"], [\"\\n  \",\n    \";\\n\"])), function (props) {\n    var circumference = getStrokeCircumference(props.size);\n    var animation = function (animProps) {\n        var baseAnimation = '0.86s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite';\n        if (animProps.phase === 'ENTER') {\n            return css(templateObject_9 || (templateObject_9 = __makeTemplateObject([\"\\n          animation: \", \" \", \",\\n            0.8s ease-in-out \", \",\\n            0.2s ease-in-out \", \";\\n        \"], [\"\\n          animation: \", \" \", \",\\n            0.8s ease-in-out \", \",\\n            0.2s ease-in-out \", \";\\n        \"])), baseAnimation, keyframeNames.rotate, getEnterStrokeKeyframe(animProps.size), keyframeNames.enterOpacity);\n        }\n        return css(templateObject_10 || (templateObject_10 = __makeTemplateObject([\"\\n        animation: \", \" \", \";\\n      \"], [\"\\n        animation: \", \" \", \";\\n      \"])), baseAnimation, keyframeNames.rotate);\n    };\n    return css(templateObject_11 || (templateObject_11 = __makeTemplateObject([\"\\n      \", \"\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"], [\"\\n      \", \"\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"])), animation, getStrokeColor, circumference, circumference * 0.8, getStrokeWidth(props.size));\n});\nvar Svg = styled.svg(templateObject_13 || (templateObject_13 = __makeTemplateObject([\"\\n  \", \";\\n\"], [\"\\n  \", \";\\n\"])), svgStyles);\nSvg.displayName = 'SpinnerSvg';\nexport default Svg;\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13;\n//# sourceMappingURL=styledSvg.js.map"]},"metadata":{},"sourceType":"module"}