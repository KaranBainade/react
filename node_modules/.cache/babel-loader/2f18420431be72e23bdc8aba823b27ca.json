{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importStar(require(\"react\"));\n\nvar styled_components_1 = tslib_1.__importDefault(require(\"styled-components\"));\n\nvar uuid_1 = tslib_1.__importDefault(require(\"uuid\"));\n\nvar colors_1 = require(\"@atlaskit/theme/colors\");\n\nvar constants_1 = require(\"../constants\");\n\nvar getSize = function (_a) {\n  var size = _a.size;\n  return size ? \"height: \" + constants_1.sizes[size] + \"; width: \" + constants_1.sizes[size] + \";\" : null;\n};\n\nexports.IconWrapper = styled_components_1.default.span(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  \", \" color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \" max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n  /* Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"], [\"\\n  \", \" color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \" max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n  /* Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"])), getSize, function (p) {\n  return p.primaryColor || 'currentColor';\n}, function (p) {\n  return p.secondaryColor || colors_1.background;\n}, getSize);\n\nvar Icon =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Icon, _super);\n\n  function Icon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /* Icons need unique gradient IDs across instances for different gradient definitions to work\n   * correctly.\n   * A step in the icon build process replaces linear gradient IDs and their references in paths\n   * to a placeholder string so we can replace them with a dynamic ID here.\n   * Replacing the original IDs with placeholders in the build process is more robust than not\n   * using placeholders as we do not have to rely on regular expressions to find specific element\n   * to replace.\n   */\n\n\n  Icon.insertDynamicGradientID = function (svgStr) {\n    var id = uuid_1.default();\n    var replacedSvgStr = svgStr.replace(/id=\"([^\"]+)-idPlaceholder\"/g, \"id=$1-\" + id).replace(/fill=\"url\\(#([^\"]+)-idPlaceholder\\)\"/g, \"fill=\\\"url(#$1-\" + id + \")\\\"\");\n    return replacedSvgStr;\n  };\n\n  Icon.prototype.render = function () {\n    var _a = this.props,\n        Glyph = _a.glyph,\n        dangerouslySetGlyph = _a.dangerouslySetGlyph,\n        primaryColor = _a.primaryColor,\n        secondaryColor = _a.secondaryColor,\n        size = _a.size; // handling the glyphs as strings\n\n    if (dangerouslySetGlyph) {\n      return react_1.default.createElement(exports.IconWrapper, {\n        primaryColor: primaryColor,\n        secondaryColor: secondaryColor,\n        size: size,\n        \"aria-label\": this.props.label,\n        dangerouslySetInnerHTML: {\n          __html: Icon.insertDynamicGradientID(dangerouslySetGlyph)\n        }\n      });\n    } // handling the glyphs when passed through as functions\n\n\n    return react_1.default.createElement(exports.IconWrapper, {\n      primaryColor: primaryColor,\n      secondaryColor: secondaryColor,\n      size: size,\n      \"aria-label\": this.props.label\n    }, Glyph ? react_1.default.createElement(Glyph, {\n      role: \"presentation\"\n    }) : null);\n  };\n\n  return Icon;\n}(react_1.Component);\n\nexports.default = Icon;\nvar templateObject_1;","map":{"version":3,"sources":["../../src/components/Icon.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = tslib_1.__importStar(require(\"react\"));\nvar styled_components_1 = tslib_1.__importDefault(require(\"styled-components\"));\nvar uuid_1 = tslib_1.__importDefault(require(\"uuid\"));\nvar colors_1 = require(\"@atlaskit/theme/colors\");\nvar constants_1 = require(\"../constants\");\nvar getSize = function (_a) {\n    var size = _a.size;\n    return size ? \"height: \" + constants_1.sizes[size] + \"; width: \" + constants_1.sizes[size] + \";\" : null;\n};\nexports.IconWrapper = styled_components_1.default.span(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  \", \" color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \" max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n  /* Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"], [\"\\n  \", \" color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \" max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n  /* Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"])), getSize, function (p) { return p.primaryColor || 'currentColor'; }, function (p) { return p.secondaryColor || colors_1.background; }, getSize);\nvar Icon = /** @class */ (function (_super) {\n    tslib_1.__extends(Icon, _super);\n    function Icon() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* Icons need unique gradient IDs across instances for different gradient definitions to work\n     * correctly.\n     * A step in the icon build process replaces linear gradient IDs and their references in paths\n     * to a placeholder string so we can replace them with a dynamic ID here.\n     * Replacing the original IDs with placeholders in the build process is more robust than not\n     * using placeholders as we do not have to rely on regular expressions to find specific element\n     * to replace.\n     */\n    Icon.insertDynamicGradientID = function (svgStr) {\n        var id = uuid_1.default();\n        var replacedSvgStr = svgStr\n            .replace(/id=\"([^\"]+)-idPlaceholder\"/g, \"id=$1-\" + id)\n            .replace(/fill=\"url\\(#([^\"]+)-idPlaceholder\\)\"/g, \"fill=\\\"url(#$1-\" + id + \")\\\"\");\n        return replacedSvgStr;\n    };\n    Icon.prototype.render = function () {\n        var _a = this.props, Glyph = _a.glyph, dangerouslySetGlyph = _a.dangerouslySetGlyph, primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor, size = _a.size;\n        // handling the glyphs as strings\n        if (dangerouslySetGlyph) {\n            return (react_1.default.createElement(exports.IconWrapper, { primaryColor: primaryColor, secondaryColor: secondaryColor, size: size, \"aria-label\": this.props.label, dangerouslySetInnerHTML: {\n                    __html: Icon.insertDynamicGradientID(dangerouslySetGlyph),\n                } }));\n        }\n        // handling the glyphs when passed through as functions\n        return (react_1.default.createElement(exports.IconWrapper, { primaryColor: primaryColor, secondaryColor: secondaryColor, size: size, \"aria-label\": this.props.label }, Glyph ? react_1.default.createElement(Glyph, { role: \"presentation\" }) : null));\n    };\n    return Icon;\n}(react_1.Component));\nexports.default = Icon;\nvar templateObject_1;\n//# sourceMappingURL=Icon.js.map"]},"metadata":{},"sourceType":"script"}